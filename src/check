# 1 "trie.c"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 361 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "trie.c" 2
# 1 "./trie.h" 1




# 1 "./utils.h" 1





size_t ascii_to_index(char c);
void remove_char(char *word, size_t index);
void parse_word(char *word);
char* concat(const char *s1, const char *s2);
# 6 "./trie.h" 2

typedef struct trie {
    struct trie * fils[26];
    bool est_mot;
} *Trie;

Trie trie_init();
Trie trie_insert(Trie t, char * mot);
bool trie_rech(Trie t, char * mot);
void trie_sup(Trie t);
size_t ascii_to_index(char c);
# 2 "trie.c" 2


Trie trie_init()
{
    Trie nt = (Trie) malloc (sizeof(struct trie));
    if (nt == NULL)
        exit(EXIT_FAILURE);
    for (int i = 0; i < 26; i++)
        nt->fils[i] = NULL;
    nt->est_mot = false;
    return nt;
}





Trie trie_insert(Trie t, char * mot)
{
    int lgr = strlen(mot);
    int ind;

    Trie tmp = t;
    for (int i = 0; i < lgr; i++)
    {
        ind = ascii_to_index(mot[i]);
        if (tmp->fils[ind] == NULL)
            tmp->fils[ind] = trie_init();
        tmp = tmp->fils[ind];
    }
    tmp->est_mot = true;
    return t;
}


bool trie_rech(Trie t, char * mot)
{
    int lgr = strlen(mot);
    int ind;

    Trie tmp = t;
    for (int i = 0; i < lgr; i++)
    {
        ind = ascii_to_index(mot[i]);
        if (tmp->fils[ind] == NULL)
            return false;
        tmp = tmp->fils[ind];
    }
    return (tmp != NULL && tmp->est_mot);
}

void trie_sup(Trie t)
{
    for (int i = 0; i < 26; i++)
    {
        if (t->fils[i] != NULL)
            trie_sup(t->fils[i]);
    }
    free(t);
}
